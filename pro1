import json
import subprocess
import sqlite3
import datetime
from collections import defaultdict
from pathlib import Path
from typing import Any

def run_task(task_description: str):
    """Parses and executes a task based on its description."""
    task = parse_task(task_description)
    execute_task(task)

def parse_task(description: str) -> dict:
    """Uses an LLM to interpret the task description and return structured task details."""
    # Placeholder: Replace with an actual LLM call
    structured_task = {
        "action": "count_wednesdays",  # Example action
        "input": "/data/dates.txt",
        "output": "/data/dates-wednesdays.txt"
    }
    return structured_task

def execute_task(task: dict):
    """Executes the parsed task based on its action."""
    action = task.get("action")
    if action == "count_wednesdays":
        count_wednesdays(task["input"], task["output"])
    elif action == "format_markdown":
        format_markdown(task["input"])
    elif action == "sort_contacts":
        sort_contacts(task["input"], task["output"])
    elif action == "extract_log_headers":
        extract_log_headers(task["input"], task["output"])
    elif action == "compute_ticket_sales":
        compute_ticket_sales(task["input"], task["output"], task["ticket_type"])
    else:
        raise ValueError(f"Unknown task action: {action}")

def count_wednesdays(input_file: str, output_file: str):
    """Counts the number of Wednesdays in a given date file."""
    with open(input_file, "r") as f:
        dates = [line.strip() for line in f]
    
    count = sum(1 for d in dates if datetime.datetime.strptime(d, "%Y-%m-%d").weekday() == 2)
    with open(output_file, "w") as f:
        f.write(str(count))

def format_markdown(file_path: str):
    """Formats a Markdown file using Prettier."""
    subprocess.run(["npx", "prettier", "--write", file_path], check=True)

def sort_contacts(input_file: str, output_file: str):
    """Sorts contacts in a JSON file by last name, then first name."""
    with open(input_file, "r") as f:
        contacts = json.load(f)
    contacts.sort(key=lambda c: (c["last_name"], c["first_name"]))
    with open(output_file, "w") as f:
        json.dump(contacts, f, indent=2)

def extract_log_headers(log_dir: str, output_file: str):
    """Extracts the first line of the 10 most recent log files."""
    logs = sorted(Path(log_dir).glob("*.log"), key=lambda p: p.stat().st_mtime, reverse=True)[:10]
    with open(output_file, "w") as f:
        for log in logs:
            with open(log, "r") as lf:
                first_line = lf.readline().strip()
                f.write(first_line + "\n")

def compute_ticket_sales(db_file: str, output_file: str, ticket_type: str):
    """Computes the total sales for a given ticket type."""
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    cursor.execute("SELECT SUM(units * price) FROM tickets WHERE type = ?", (ticket_type,))
    total_sales = cursor.fetchone()[0] or 0
    conn.close()
    with open(output_file, "w") as f:
        f.write(str(total_sales))

# Example usage
# run_task("Count the number of Wednesdays in /data/dates.txt and write the result to /data/dates-wednesdays.txt")
